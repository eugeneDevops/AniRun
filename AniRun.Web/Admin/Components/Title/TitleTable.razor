@inject ITitleService _titleService

<Table TItem="ViewTitle" DataSource="Titles">
    <Column Title="Название" Sortable @bind-Field="@context.Name">@context.Name</Column>
    <Column Title="Тип" Sortable @bind-Field="@context.Type">@(EnumHelper<TypeTitle>.GetDisplayName(context.Type))</Column>
    <Column Title="Статус" Sortable @bind-Field="@context.Status">@(EnumHelper<StatusTitle>.GetDisplayName(context.Status))</Column>
    <Column Title="Возрастная категория" Sortable @bind-Field="@context.Rating">@(EnumHelper<Rating>.GetDisplayName(context.Rating))</Column>
    <ActionColumn Width="100"><DetailsTitle Title="@context"></DetailsTitle></ActionColumn>
    <ActionColumn Width="100">
        <Space>
            <SpaceItem>
                <AddEpisode Title="@context" OnTitleEdited="OnTitlesChange"/>
            </SpaceItem>
            <SpaceItem>
                <UpdateTitle Title="@context" OnTitleEdited="OnTitlesChange"/>
            </SpaceItem>
            <SpaceItem>
                <Popconfirm Title="Удалить аниме?" OnConfirm="async () => await DeleteTitle(context.Id)" OkText="Да" CancelText="Нет">
                    <Button>Удалить</Button>
                </Popconfirm>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

@code {
    [Parameter] public List<ViewTitle> Titles { get; set; }
    [Parameter] public EventCallback OnTitlesChange { get; set; }

    public async Task DeleteTitle(Guid titleId)
    {
        await _titleService.DeleteTitle(titleId);
        await OnTitlesChange.InvokeAsync();
    }
}